[tool.poetry]
name = "app"
version = "0.0.1"
description = "A FastAPI application to generate product descriptions."
authors = ["Rudolf Nemov <rudiemeant@gmail.com>"]
maintainers = ["Rudolf Nemov <rudiemeant@gmail.com>"]
package-mode = false

[tool.poetry.dependencies]
python = "3.13.0"
uvicorn = "^0.32.1"
fastapi = { extras = ["standard"], version = "^0.115.5" }
pydantic = "^2.10.0"
pydantic-settings = "^2.6.1"
aiohttp = "^3.11.7"
loguru = "^0.7.2"
openai = "^1.55.0"
gunicorn = "^23.0.0"
arrow = "^1.3.0"
aiocache = "^0.12.3"
orjson = "^3.10.11"
uvloop = { version = "^0.21.0", markers = "sys_platform == 'linux' or sys_platform == 'linux2'" }

[tool.poetry.group.dev.dependencies]
bandit = { extras = ["toml"], version = "*" }
ruff = "^0.7.4"
mypy = "^1.13.0"
loguru-mypy = "^0.0.4"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
aioresponses = "^0.7.7"
httpx = "^0.27.2"

[tool.black]
line-length = 100

[tool.autopep8]
max_line_length = 100
in-place = true
recursive = true
aggressive = 3
select = ["E203", "W503"]

[tool.isort]
profile = "black"
line_length = 120
wrap_length = 120
multi_line_output = 3
combine_as_imports = true
force_alphabetical_sort_within_sections = true
overwrite_in_place = true
skip_glob = []

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.13"
strict = true
follow_imports = "silent"
warn_return_any = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true
namespace_packages = true
fast_module_lookup = true
exclude = []

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.bandit]
skips = [
    "B311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-s -vvv -o log_cli=true -o log_cli_level=DEBUG"
pythonpath = ["."]
python_files = ["test_*.py"]

[tool.coverage.run]
source = ["app"]
parallel = false

[tool.coverage.report]
exclude_lines = [
    # Skip any pass lines such as may be used for @abstractmethod.
    "pass",

    # Don't complain if tests don't hit defensive assertion code.
    "raise NotImplementedError",
]

[tool.ruff]
lint.ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D205",   # 1 blank line required between summary line and description
    "D213",   # Multi-line docstring summary should start at the second line
    "ANN101", # Missing type annotation for self in method
    "ANN001", # Missing type annotation for function argument 'cls'
    "ANN102", # Missing type annotation for cls in classmethod
    "FIX001", # Line contains FIXME, consider resolving an issue
    "FIX002", # Line contains TODO, consider resolving an issue
    "TD001",  # Invalid TODO tag: `FIXME`
    # "RUF029", # Function `func` is declared `async`, but doesn't `await` or use `async` features.
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]
target-version = "py313"
lint.task-tags = ["TODO", "FIXME", "NOTE"]
fix = true
show-fixes = true
preview = true
respect-gitignore = false
line-length = 120
lint.select = [
    "F", # PyFlakes
    "I", # isort
    # "UP", # PyUpgrade
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "ASYNC1", # flake8-trio
    # "B", # bugbear
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "EXE", # flake8-executable
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    # "PT",  # flake8-pytest
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    # "ERA", # flake8-eradicate
    "PGH", # pygrep-hooks
    "FLY", # flynt
    # "NPY", # NumPy-specific rules
    # "PERF", # Perflint
    # "FURB", # Refurb
    "LOG", # flake8-logging
    # "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "T20", # flake8-print
    # "DTZ", # flake8-datetimez
    # "ARG", # flake8-unused-arguments
    # "PD",    # pandas-vet
    # "C90", # McCabe
    # "ANN", # flake8-annotations
    # "FBT", # flake8-boolean-trap
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todo
    "FIX", # flake8-fixme
    # "N",   # pep8-naming
    # "D", # flake8-docstrings
    # "BLE", # flake8-blind-except
    # "A", # builtins
    "SLOT", # flake8-slot
    # "PL",   # pylint
    # "COM812", # flake8-commas

]
exclude = [".idea", "*migrations*"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    # "D203",  # Missing docstring in public function
    "S101", # Use of assert detected
]
"alembic/**/*.py" = [
    "S608", # Possible SQL injection vector through string-based query construction
]


[tool.ruff.lint.isort]
order-by-type = false
